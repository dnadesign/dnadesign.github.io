<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0">
<channel>
        <title>DNA Labs</title>
        <description>DNA Labs - </description>
        <link>http://labs.dna.co.nz</link>
        <link>http://labs.dna.co.nz</link>
        <lastBuildDate>2014-09-28T20:03:01+13:00</lastBuildDate>
        <pubDate>2014-09-28T20:03:01+13:00</pubDate>
        <ttl>1800</ttl>


        <item>
                <title>Resolving SilverStripe Error 'Hmm - depth calc wrong'</title>
                <description>&lt;p&gt;While developing with SilverStripe 3 you may run into an error which looks 
something like:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;Fatal error: Hmm - depth calc wrong, hit negatives, see: app/code/MyClass.php in ConfigStaticManifest.php on line 240
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;While this error may seem confusing, resolving it usually is as straightforward
as resolving a normal syntax error in the mentioned file.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note the error may only show itself when you&amp;#39;re doing a database rebuild or a 
flush operation since it originates from SilverStripe trying to parse every
class.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To start tracking down the syntax error look at the file mentioned in the error
message. In our error message from above, that file is &lt;code&gt;app/code/MyClass.php&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You can then use the PHP CLI binary to syntax check that particular file and 
track down the syntax error in question&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;php -l app/code/MyClass.php

PHP Parse error:  syntax error, unexpected &amp;#39;return&amp;#39; (T_RETURN), expecting function (T_FUNCTION) in app/code/MyClass.php on line 459

Parse error: syntax error, unexpected &amp;#39;return&amp;#39; (T_RETURN), expecting function (T_FUNCTION) in app/code/MyClass.php on line 459
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is not the most user friendly error message from SilverStripe and likely
a common issue if the number of cursing we&amp;#39;ve done here is any indication (and
the IRC / Github discussions [1] [2] raised for it).&lt;/p&gt;

&lt;p&gt;As &lt;a href=&quot;api.silverstripe.org/3.1/class-ErrorControlChain.html&quot;&gt;ErrorControlChain&lt;/a&gt; is 
still new this is a temporary issue that will be resolved for the next major 
release.&lt;/p&gt;

&lt;p&gt;[1] &lt;a href=&quot;https://github.com/silverstripe/silverstripe-framework/pull/2470&quot;&gt;https://github.com/silverstripe/silverstripe-framework/pull/2470&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[2] &lt;a href=&quot;http://logs.simon.geek.nz/index.php?date=2013-10-18&quot;&gt;http://logs.simon.geek.nz/index.php?date=2013-10-18&lt;/a&gt;&lt;/p&gt;
</description>
                <link>http://labs.dna.co.nz/2014/10/01/resolving-silverstripe-error-depth-calc</link>
                <guid>http://labs.dna.co.nz/2014/10/01/resolving-silverstripe-error-depth-calc</guid>
                <pubDate>2014-10-01T00:00:00+13:00</pubDate>
        </item>

        <item>
                <title>How to do it the DNA way</title>
                <description>&lt;p&gt;We&amp;#39;ve been doing front end development for a while and have been seeing a couple of trends for us.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Bigger and more complex jobs due to responsive and increasing online services.&lt;/li&gt;
&lt;li&gt;Bigger and more diverse teams needed due to bigger jobs.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This meant we needed to standardize the way we work.&lt;/p&gt;

&lt;p&gt;In the past we had look at OOCSS to solve our issues however with responsive that gets quite clunky quite quickly. You 
end up with needing col-sm-1, col-md-2, col-lrg-1 etc. While that works OK-ish for grids it doesn&amp;#39;t for much else. We 
had been using classes like f-left for float:left, however now we were going to need, sm-f-left, md-f-left, lrg-f-left 
etc. &lt;/p&gt;

&lt;p&gt;Wasn&amp;#39;t going to be fun for anyone.&lt;/p&gt;

&lt;p&gt;Meanwhile we&amp;#39;d seen BEM being talked about and thought it looked a bit weird.&lt;/p&gt;

&lt;p&gt;We had decided on mobile first on our first big responsive project (wellington.govt.nz), and had created a stylesheet 
for each breakpoint. Each stylesheet was getting quite large by the time Will got assigned to the job, so he introduced 
Grunt and we&amp;#39;ve never looked back.&lt;/p&gt;

&lt;p&gt;We then moved onto our next big responsive project and while Grunt was helping us keep stylesheets smaller, there was a 
lot of searching going on. It wasn&amp;#39;t clear what bits were re-usable and which weren&amp;#39;t. This resulted in a lot of 
coupling and some hard to maintain code.&lt;/p&gt;

&lt;p&gt;We looked at BEM again. Now it made sense.&lt;/p&gt;

&lt;p&gt;So we re-factored our grunt tasks, included our javascript in a component folders alongside our CSS and have recommended 
sticking to completely independent components as much as possible.&lt;/p&gt;

&lt;p&gt;The goals are:
 * Separate development stylesheets for each breakpoint
 * Mobile browsers should receive their styles first.
 * One minified production stylesheet
 * Classname and breakpoint stylesheet pinpoint exactly which file needs to be edited&lt;/p&gt;

&lt;p&gt;It&amp;#39;ll probably morph a bit over time, but so far so good.&lt;/p&gt;

&lt;p&gt;Comments, questions, thoughts welcome on &lt;a href=&quot;https://github.com/dnadesign/dna_frontend_boilerplate&quot;&gt;github.com/dnadesign/dna_frontend_boilerplate&lt;/a&gt;&lt;/p&gt;
</description>
                <link>http://labs.dna.co.nz/2014/09/01/dna-way</link>
                <guid>http://labs.dna.co.nz/2014/09/01/dna-way</guid>
                <pubDate>2014-09-01T00:00:00+12:00</pubDate>
        </item>

        <item>
                <title>Deployments and Shipistrano</title>
                <description>&lt;p&gt;Having a robust deployment system for a web application is the difference between sparking eternal fear or righteous joy
in your project team when it comes to deploy Tuesdays. In a time not so long ago (and still for quite a few people) we 
used to deploy sites manually, by hand over File Transfer Protocol (FTP). Maintenance pages would get added to the 
server, we&amp;#39;d watch files sync slowly over our internet connection then quickly QA and test the site before removing
the maintenance page and handing it over to the client till next week.&lt;/p&gt;

&lt;p&gt;So much has changed since then (and so much hasn&amp;#39;t), but luckily we know and have better ways of doing some of these 
things. One, is we now script our basic FTP deployments using &lt;a href=&quot;https://github.com/heyday/beam&quot;&gt;Beam&lt;/a&gt;. An awesome little 
command line tool for deploying websites to servers. &lt;/p&gt;

&lt;p&gt;This is a step up over the manual process by automating our deployment tasks and forcing our deployment steps to be 
defined in configuration files and therefore applied automatically - less you run the risk of your intern not reading 
your detailed &lt;code&gt;README&lt;/code&gt; notes.&lt;/p&gt;

&lt;p&gt;Tools like Beam, Git-FTP and the whole host of hosting solutions are great, and if you&amp;#39;re still doing FTP deployments
definitely invest in a scripted solution. But by a certain point those tools become less effective. In our case, for our 
bigger clients deploying a site can involve much more ceremony. In these cases we use 
&lt;a href=&quot;http://capistranorb.com/&quot;&gt;Capistrano&lt;/a&gt; a widely used remote server automation and deployment tool written in 
Ruby. Not only is it more fully featured (built in rollback, history, asset management) than Git based deployment 
systems but it gives us a better framework for writing deploy work flows and on the plus site it&amp;#39;s used by
several other platforms we use such as the &lt;a href=&quot;https://www.cwp.govt.nz/&quot;&gt;Common Web Platform&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We&amp;#39;ve deployed Capistrano for dozens of our clients but we&amp;#39;ve found each site is never exactly the same. Different 
platforms, different services, different folder layouts all make for one slightly queezy Devop team.&lt;/p&gt;

&lt;p&gt;To strive to make our Capistrano setups consistent (or at least somewhat unified) between projects we&amp;#39;ve been working on 
&lt;a href=&quot;https://github.com/dnadesign/shipistrano&quot;&gt;Shipistrano&lt;/a&gt;. A shared collection of Capistrano helpers for shipping code 
with the idea of making reusable helpers that we can plug in and configure depending on the particular application. &lt;/p&gt;

&lt;p&gt;For instance, if we&amp;#39;re deploying a Wordpress site we&amp;#39;d include &lt;code&gt;wordpress&lt;/code&gt; helper and that&amp;#39;ll add to Capistrano all the 
configuration we need for managing any instance that has Wordpress. If we ever needed to run a task on our Wordpress 
sites we could update Shipstrano once and roll out the new version to any project with that helper.  All configuration 
for the particular site is kept in the top level &lt;code&gt;Capfile&lt;/code&gt; while all the recipes and helpers are in the shared 
Shipstrano repository.&lt;/p&gt;

&lt;p&gt;Going back to the Wordpress example, the project developer would add Shipstrano..&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;cd ~/Sites/project
git submodule add git@github.com:dnadesign/shipistrano.git cap
git submodule sync
git submodule init
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then create a Capfile in the root of the project loading the helpers they want along with declaring the normal 
Capistrano configuration (note we still use v2, upgrading to v3 would make this much nicer).&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;require &amp;#39;rubygems&amp;#39;
require &amp;#39;railsless-deploy&amp;#39;

set :app,               &amp;quot;somewebsite.co.nz&amp;quot;
set :repository,        &amp;#39;git@git.dna.co.nz:somewebsite.git&amp;#39;
set :user,              &amp;#39;&amp;#39;
set :group,             &amp;#39;&amp;#39;
set :ip,                &amp;#39;123.456.789.000&amp;#39;
set :deploy_to,         &amp;quot;/srv/somewebsite.co.nz&amp;quot;
set :scm,               &amp;#39;git&amp;#39;
set :scm_username,      &amp;#39;git&amp;#39;

role :web,  &amp;quot;#{ip}&amp;quot;

load &amp;#39;cap/lib/shipistrano&amp;#39;

# Specific stuff for Wordpress
load &amp;#39;cap/lib/wordpress&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The flexibility of the helper approach is great and you can do some useful things all within the cap file simply by
loading and executing functions from the helpers as you need. Capistrano handles the core work such as backups, rsyncing
the code, managing dependencies like Composer, NPM modules and Ruby gems, then we&amp;#39;ve got our own helpers for managing 
assets, database engines, htaccess rules and managing framework specific information (like rebuilding databases, 
clearing caches), anything we feel we should automate.&lt;/p&gt;

&lt;p&gt;The capfile provides a documented and standard way of interacting with our servers. Take example our &lt;code&gt;mysql&lt;/code&gt; helper. 
This adds common support for syncing your local development and remote environments. By loading the helper&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;load &amp;#39;cap/lib/mysql&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You&amp;#39;ll get a bunch of functions like &lt;code&gt;mysql:upload&lt;/code&gt; and &lt;code&gt;mysql:download&lt;/code&gt; for syncing your databases without worrying 
about how or where. The configuration information is stored in your Capfile, so adding helpers can be reused between 
sites.&lt;/p&gt;

&lt;p&gt;Developers can see a list of all the tasks setup for a project by running &lt;code&gt;cap -vT&lt;/code&gt; which lists the task and a 
description.&lt;/p&gt;

&lt;p&gt;On top of that you can use Capistrano namespaces directly into add in multiple environments (say a client preview) or 
add our production workflow helper for having a &lt;code&gt;production&lt;/code&gt; release on top of your staging site. An example capfile for
that might look like.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;require &amp;#39;rubygems&amp;#39;

def setup()
    set :repository,        &amp;#39;git@git.dna.co.nz:somewebsite.git&amp;#39;
    set :mysql_database,    &amp;#39;somewebsite&amp;#39;
    set :mysql_user,        &amp;#39;somewebsite&amp;#39;
    set :mysql_ask_for_pass, true
    set :user,              &amp;#39;somewebsite&amp;#39;
    set :group,             &amp;#39;psaserv&amp;#39;

    load &amp;#39;cap/lib/shipistrano&amp;#39;
    load &amp;#39;cap/lib/shipistrano/helpers/production&amp;#39;
    load &amp;#39;cap/lib/shipistrano/helpers/mysql&amp;#39;

    role :web,  &amp;quot;#{ip}&amp;quot;
    role :app,  &amp;quot;#{ip}&amp;quot;
    role :db,   &amp;quot;#{ip}&amp;quot;, :primary =&amp;gt; true
end

task :production do
    set :app,               &amp;quot;somewebsite.co.nz&amp;quot;
    set :ip,                &amp;#39;123.45.67.890&amp;#39;
    set :deploy_to,         &amp;quot;/var/www/vhosts/#{app}/httpdocs/&amp;quot;

    setup()
end

task :staging do
    set :app,               &amp;quot;staging.somewebsite.co.nz&amp;quot;
    set :ip,                &amp;#39;123.45.67.891&amp;#39;
    set :deploy_to,         &amp;quot;/var/www/vhosts/#{app}/httpdocs/&amp;quot;

    setup()

    load &amp;#39;cap/lib/shipistrano/helpers/htaccess&amp;#39;

    set :auth_user,         &amp;#39;secure&amp;#39;
    set :auth_pass,         &amp;#39;protected&amp;#39;
    set :auth_folder,       &amp;quot;#{deploy_to}/current&amp;quot;

    after(&amp;#39;deploy:update&amp;#39;, &amp;#39;htaccess:auth:protect&amp;#39;)
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we have two tasks production and staging with different configuration. You&amp;#39;ll also note the staging site has a 
extra helper for adding HTTP Basic Auth preventing unknown outsiders from accessing the site. Because we&amp;#39;ve now got 
namespaces setup our cap commands can target specific instances.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;cap production mysql:upload // upload to production database
cap staging deploy // deploy to staging
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As with everything, Shipistrano is a work in progress and opinionated to how we do things. We&amp;#39;ll roll it out on more
projects and hope to have a robust set of helpers that we can rely on being best practice, tested and useful for our 
development team so less time spend worrying over the risks of deployment and more time building.&lt;/p&gt;
</description>
                <link>http://labs.dna.co.nz/2014/08/03/shipistrano</link>
                <guid>http://labs.dna.co.nz/2014/08/03/shipistrano</guid>
                <pubDate>2014-08-03T00:00:00+12:00</pubDate>
        </item>

        <item>
                <title>Animation and CSS3 gradients</title>
                <description>&lt;p&gt;In a recent project for &lt;a href=&quot;http://www.trustpower.co.nz/&quot;&gt;TrustPower&lt;/a&gt; we had a play at ways to both incorporate each of the 
clients&amp;#39; brand colours into the primary application header.&lt;/p&gt;

&lt;p&gt;One experiment that ended up working quite well is slowly animating between several CSS3 gradients layers made up of 
their brand colors, giving a feel of a motion like flow. For an example, see below or on the 
&lt;a href=&quot;http://www.trustpower.co.nz/&quot;&gt;TrustPower&lt;/a&gt; website.&lt;/p&gt;

&lt;div class=&quot;demo_container&quot;&gt;
    &lt;div class=&quot;gradient gradient_1&quot; aria-role=&quot;presentation&quot;&gt;&lt;!--  --&gt;&lt;/div&gt;
    &lt;div class=&quot;gradient gradient_2&quot; aria-role=&quot;presentation&quot;&gt;&lt;!--  --&gt;&lt;/div&gt;
    &lt;div class=&quot;gradient gradient_3&quot; aria-role=&quot;presentation&quot;&gt;&lt;!--  --&gt;&lt;/div&gt;
    &lt;div class=&quot;gradient gradient_4&quot; aria-role=&quot;presentation&quot;&gt;&lt;!--  --&gt;&lt;/div&gt;
    &lt;div class=&quot;gradient gradient_5&quot; aria-role=&quot;presentation&quot;&gt;&lt;!--  --&gt;&lt;/div&gt;
    &lt;div class=&quot;gradient gradient_6&quot; aria-role=&quot;presentation&quot;&gt;&lt;!--  --&gt;&lt;/div&gt;
    &lt;div class=&quot;gradient gradient_7&quot; aria-role=&quot;presentation&quot;&gt;&lt;!--  --&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;This effect has been created using several of the new features in CSS3 &amp;#8212; 
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/@keyframes&quot;&gt;Keyframes&lt;/a&gt;, 
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/transition&quot;&gt;Transitions&lt;/a&gt;
and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/animation&quot;&gt;Animation&lt;/a&gt; and runs without the use of javascript.&lt;/p&gt;

&lt;p&gt;Apart earlier versions of IE, browser support is adequate with all current release browsers 
(&lt;a href=&quot;http://caniuse.com/#feat=css-gradients&quot;&gt;1&lt;/a&gt;) and an easy fall back of the solid color. Our only other concern was CPU 
usage for the animations but in our testing across desktop and mobile devices it appears to not take too much of a toll 
probably due to being GPU hardware accelerated.&lt;/p&gt;

&lt;h2&gt;How&amp;#39;d we do it&lt;/h2&gt;

&lt;p&gt;The basic premise of the effect is all the gradients are stacked up on top of each other in the DOM and the CSS code
uses varying levels of opacity specified inside key frames to &amp;#39;fade&amp;#39; the gradients between each other. The smooth 
animation is completed by a transition of the opacity of each layer.&lt;/p&gt;

&lt;p&gt;Our final implementation was written in &lt;a href=&quot;http://www.lesscss.org/&quot;&gt;LESS&lt;/a&gt; and we use &lt;a href=&quot;http://lesselements.com/&quot;&gt;Elements&lt;/a&gt; 
to consolidate cross-browser prefixes into single, concise declarations which looks something like below. &lt;/p&gt;

&lt;div id=&quot;gist-8817090&quot; class=&quot;gist&quot;&gt;
&lt;script src=&quot;https://gist.github.com/wilr/8817090.js?file=&quot;&gt;&lt;/script&gt;
&lt;noscript&gt;
&lt;pre&gt;&amp;lt;div class=&amp;quot;demo_container&amp;quot;&amp;gt;
    &amp;lt;div class=&amp;quot;gradient gradient_1&amp;quot; aria-role=&amp;quot;presentation&amp;quot;&amp;gt;&amp;lt;!--  --&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;div class=&amp;quot;gradient gradient_2&amp;quot; aria-role=&amp;quot;presentation&amp;quot;&amp;gt;&amp;lt;!--  --&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;div class=&amp;quot;gradient gradient_3&amp;quot; aria-role=&amp;quot;presentation&amp;quot;&amp;gt;&amp;lt;!--  --&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;div class=&amp;quot;gradient gradient_4&amp;quot; aria-role=&amp;quot;presentation&amp;quot;&amp;gt;&amp;lt;!--  --&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;div class=&amp;quot;gradient gradient_5&amp;quot; aria-role=&amp;quot;presentation&amp;quot;&amp;gt;&amp;lt;!--  --&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;div class=&amp;quot;gradient gradient_6&amp;quot; aria-role=&amp;quot;presentation&amp;quot;&amp;gt;&amp;lt;!--  --&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;div class=&amp;quot;gradient gradient_7&amp;quot; aria-role=&amp;quot;presentation&amp;quot;&amp;gt;&amp;lt;!--  --&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;&lt;/pre&gt;
&lt;/noscript&gt;
&lt;/div&gt;

&lt;p&gt;Markup wise, we include each of the gradients as a DOM node. These nodes are going to be controlled through opacity
and specific timed keyframe values to fade the opacity of each layer. As layers at the top of the stack decrease 
opacity, the colors from gradients below for a phase, and so on through a smooth motion animation cycle of 50 seconds. 
At any one point in the 50 second animate only two of the layers in the DOM will have an opacity that is greater than 
zero.&lt;/p&gt;

&lt;h2&gt;Finishing up&lt;/h2&gt;

&lt;p&gt;Using the HTML5 Boilerplate, the HTML element has a helper class &lt;code&gt;.lte9&lt;/code&gt; for IE9 and below browsers. Looking for that 
class we can disable all gradients apart from the first one using a simple selector to fall back to a static image.&lt;/p&gt;

&lt;p&gt;The other helper the css provides is the &lt;code&gt;no-animation&lt;/code&gt; class. When modifying the header DOM elements we could the 
animation could be jerky. By applying the &lt;code&gt;no-animation&lt;/code&gt; class to the container we can pause the animation on demand by 
adding the class to the parent. This uses 
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/animation-play-state&quot;&gt;animation-play-state&lt;/a&gt; to pause the running 
animation smoothly.&lt;/p&gt;
</description>
                <link>http://labs.dna.co.nz/2014/01/07/animation-and-css3-gradients</link>
                <guid>http://labs.dna.co.nz/2014/01/07/animation-and-css3-gradients</guid>
                <pubDate>2014-01-07T00:00:00+13:00</pubDate>
        </item>

        <item>
                <title>puts "Hello World"</title>
                <description>&lt;p&gt;Welcome to labs.dna.co.nz, a collection of showcases, code snippets, how-tos and general geekery from myself 
(&lt;a href=&quot;http://twitter.com/wilr&quot;&gt;@wilr&lt;/a&gt;), John (&lt;a href=&quot;http://twitter.com/pitchandtone&quot;&gt;@pitchandtone&lt;/a&gt;) and the rest of the
&lt;a href=&quot;http://dna.co.nz&quot;&gt;DNA&lt;/a&gt; dev team.&lt;/p&gt;

&lt;p&gt;We set this little blog (&lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;) up so that we could share our insights and the neat, 
exciting stuff that we get to experiment with and deploy for our clients.&lt;/p&gt;

&lt;p&gt;Whether it&amp;#39;s prototyping UX interactions, scaling infrastructure, application design, front end engineering patterns 
or even project management, we tackle a lot of interesting and diverse challenges during our day at DNA and it&amp;#39;s about
time we share some of those opinions.&lt;/p&gt;
</description>
                <link>http://labs.dna.co.nz/2013/04/04/puts-hello-world</link>
                <guid>http://labs.dna.co.nz/2013/04/04/puts-hello-world</guid>
                <pubDate>2013-04-04T00:00:00+13:00</pubDate>
        </item>


</channel>
</rss>
